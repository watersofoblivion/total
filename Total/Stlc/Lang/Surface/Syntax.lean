import Total.Stlc.Lang.Surface.Grammar

set_option autoImplicit false

namespace Total.Stlc.Lang.Surface
  /-!
  # Simply-Typed Lambda Calculus Surface Syntax Internal Syntax
  -/

  declare_syntax_cat stlc_surface_ty
  declare_syntax_cat stlc_surface_un_op
  declare_syntax_cat stlc_surface_bin_op
  declare_syntax_cat stlc_surface_tm
  declare_syntax_cat stlc_surface_top

  section Types
    scoped syntax "[Ty|" stlc_surface_ty "]" : term

    section Inject
      scoped syntax "‚Äπ" term "‚Ä∫" : stlc_surface_ty
      scoped syntax "(" stlc_surface_ty ")" : stlc_surface_ty

      macro_rules
        | `([Ty| ‚Äπ $t:term ‚Ä∫ ])            => `($(Lean.quote t))
        | `([Ty| ( $t:stlc_surface_ty ) ]) => `([Ty| $t])

      example (t: Ty): [Ty| ‚Äπt‚Ä∫ ]   = t := rfl
      example (t: Ty): [Ty| (‚Äπt‚Ä∫) ] = t := rfl
    end Inject

    section Booleans
      scoped syntax "ùîπ" : stlc_surface_ty

      macro_rules
        | `([Ty| ùîπ ]) => `(Ty.bool)

      example: [Ty| ùîπ] = .bool := rfl
    end Booleans

    section Nats
      scoped syntax "‚Ñï" : stlc_surface_ty

      macro_rules
        | `([Ty| ‚Ñï ]) => `(Ty.nat)

      example: [Ty| ‚Ñï] = .nat := rfl
    end Nats

    section Functions
      /-
      scoped syntax:30 stlc_surface_ty:31 "‚Üí" stlc_surface_ty:30 : stlc_surface_ty

      @[reducible]
      def fn: Ty ‚Üí Ty ‚Üí Ty
        | œÑ, .fn params res => .fn (œÑ :: params) res
        | œÑ‚ÇÅ, œÑ‚ÇÇ            => .fn [œÑ‚ÇÅ] œÑ‚ÇÇ

      macro_rules
        | `([Ty| $x:stlc_surface_ty ‚Üí $y:stlc_surface_ty ]) => `(fn [Ty| $x] [Ty| $y])

      variable {œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚ÇÉ: Ty}

      example: [Ty| ‚ÄπœÑ‚ÇÅ‚Ä∫ ‚Üí ‚ÄπœÑ‚ÇÇ‚Ä∫ ‚Üí ‚ÄπœÑ‚ÇÉ‚Ä∫]   = .fn [œÑ‚ÇÅ] œÑ‚ÇÉ          := sorry -- rfl
      example: [Ty| (‚ÄπœÑ‚ÇÅ‚Ä∫ ‚Üí ‚ÄπœÑ‚ÇÇ‚Ä∫) ‚Üí ‚ÄπœÑ‚ÇÉ‚Ä∫] = .fn [.fn [œÑ‚ÇÅ] œÑ‚ÇÇ] œÑ‚ÇÉ := sorry -- rfl
      -/
    end Functions
  end Types

  section UnOps
    scoped syntax "[UnOp|" stlc_surface_un_op "]" : term

    scoped syntax "‚Äπun:" term "‚Ä∫" : stlc_surface_un_op
    scoped syntax "¬¨" : stlc_surface_un_op

    macro_rules
      | `([UnOp| ‚Äπun: $t:term ‚Ä∫ ]) => `($(Lean.quote t))
      | `([UnOp| ¬¨ ])              => `(UnOp.not)
  end UnOps

  section BinOps
    scoped syntax "[BinOp|" stlc_surface_bin_op "]" : term

    scoped syntax "‚Äπbin:" term "‚Ä∫" : stlc_surface_bin_op
    scoped syntax "‚àß" : stlc_surface_bin_op
    scoped syntax "‚à®" : stlc_surface_bin_op
    scoped syntax "+" : stlc_surface_bin_op
    scoped syntax "*" : stlc_surface_bin_op
    scoped syntax "=" : stlc_surface_bin_op
    scoped syntax "‚â†" : stlc_surface_bin_op
    scoped syntax "<" : stlc_surface_bin_op
    scoped syntax "‚â§" : stlc_surface_bin_op
    scoped syntax ">" : stlc_surface_bin_op
    scoped syntax "‚â•" : stlc_surface_bin_op

    macro_rules
      | `([BinOp| ‚Äπbin: $t:term ‚Ä∫ ]) => `($(Lean.quote t))
      | `([BinOp| ‚àß ])               => `(BinOp.and)
      | `([BinOp| ‚à® ])               => `(BinOp.or)
      | `([BinOp| + ])               => `(BinOp.add)
      | `([BinOp| * ])               => `(BinOp.mul)
      | `([BinOp| = ])               => `(BinOp.eq)
      | `([BinOp| ‚â† ])               => `(BinOp.neq)
      | `([BinOp| < ])               => `(BinOp.lt)
      | `([BinOp| ‚â§ ])               => `(BinOp.lte)
      | `([BinOp| > ])               => `(BinOp.gt)
      | `([BinOp| ‚â• ])               => `(BinOp.gte)
  end BinOps

  section Terms
    scoped syntax "[Term|" stlc_surface_tm "]" : term

    section Inject
      scoped syntax "‚Äπ" term "‚Ä∫" : stlc_surface_tm
      scoped syntax "(" stlc_surface_tm ")" : stlc_surface_tm

      macro_rules
        | `([Term| ‚Äπ $t:term ‚Ä∫ ])            => `($(Lean.quote t))
        | `([Term| ( $t:stlc_surface_tm ) ]) => `([Term| $t])

      variable {t: Term}

      example: [Term| ‚Äπt‚Ä∫]        = t := rfl
      example: [Term| (‚Äπt‚Ä∫)]      = t := rfl
    end Inject

    section Booleans
      scoped syntax "tru" : stlc_surface_tm
      scoped syntax "fls" : stlc_surface_tm
      scoped syntax "‚Äπbool:" term "‚Ä∫" : stlc_surface_tm

      macro_rules
        | `([Term| tru ])              => `(Term.bool true)
        | `([Term| fls ])              => `(Term.bool false)
        | `([Term| ‚Äπbool: $b:term ‚Ä∫ ]) => `(Term.bool $(Lean.quote b))

      variable {b: Bool}

      example: [Term| tru]      = @Term.bool true  := rfl
      example: [Term| fls]      = @Term.bool false := rfl
      example: [Term| ‚Äπbool:b‚Ä∫] = @Term.bool b     := rfl
    end Booleans

    section Nats
      scoped syntax num : stlc_surface_tm
      scoped syntax "‚Äπnat:" term "‚Ä∫" : stlc_surface_tm

      macro_rules
        | `([Term| $n:num ])          => `(Term.nat $n)
        | `([Term| ‚Äπnat: $n:term ‚Ä∫ ]) => `(Term.nat $(Lean.quote n))

      variable {n: Nat}

      example: [Term| 0]       = @Term.nat 0 := rfl
      example: [Term| 1]       = @Term.nat 1 := rfl
      example: [Term| 2]       = @Term.nat 2 := rfl
      example: [Term| ‚Äπnat:n‚Ä∫] = @Term.nat n := rfl
    end Nats

    section UnOp
      scoped syntax stlc_surface_un_op stlc_surface_tm : stlc_surface_tm

      macro_rules
        | `([Term| $op:stlc_surface_un_op $operand:stlc_surface_tm]) => `(Term.unOp [UnOp| $op] [Term| $operand])

      variable {op: UnOp}
      variable {t: Term}

      example: [Term| ‚Äπun:op‚Ä∫ ‚Äπt‚Ä∫] = .unOp op t := rfl
    end UnOp

    section BinOp
      scoped syntax stlc_surface_tm stlc_surface_bin_op stlc_surface_tm : stlc_surface_tm

      macro_rules
        | `([Term| $lhs:stlc_surface_tm $op:stlc_surface_bin_op $rhs:stlc_surface_tm]) => `(Term.binOp [BinOp| $op] [Term| $lhs] [Term| $rhs])

      variable {op: BinOp}
      variable {t‚ÇÅ t‚ÇÇ: Term}

      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚Äπbin:op‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫] = .binOp op t‚ÇÅ t‚ÇÇ := rfl
    end BinOp

    section Logic
      variable {t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ: Term}

      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫] = .binOp .and t‚ÇÅ t‚ÇÇ := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫] = .binOp .or  t‚ÇÅ t‚ÇÇ := rfl
      example: [Term| ¬¨‚Äπt‚Ä∫]        = .unOp  .not t     := rfl

      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫]   = .binOp .and (.binOp .and t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| (‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫) ‚àß ‚Äπt‚ÇÉ‚Ä∫] = .binOp .and (.binOp .and t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß (‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫)] = .binOp .and t‚ÇÅ (.binOp .and t‚ÇÇ t‚ÇÉ) := rfl
      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫]   = .binOp .or  (.binOp .or  t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| (‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫) ‚à® ‚Äπt‚ÇÉ‚Ä∫] = .binOp .or  (.binOp .or  t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® (‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫)] = .binOp .or  t‚ÇÅ (.binOp .or  t‚ÇÇ t‚ÇÉ) := rfl

      -- example: [Term| ¬¨‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫]   = .binOp .and (.unOp .not t‚ÇÅ) t‚ÇÇ  := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ¬¨‚Äπt‚ÇÇ‚Ä∫]   = .binOp .and t‚ÇÅ (.unOp .not t‚ÇÇ)  := rfl
      -- example: [Term| ¬¨‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫]   = .binOp .or  (.unOp .not t‚ÇÅ) t‚ÇÇ  := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ¬¨‚Äπt‚ÇÇ‚Ä∫]   = .binOp .or  t‚ÇÅ (.unOp .not t‚ÇÇ)  := rfl
      example: [Term| ¬¨(‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫)] = .unOp  .not (.binOp .and t‚ÇÅ t‚ÇÇ) := rfl
      example: [Term| ¬¨(‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫)] = .unOp  .not (.binOp .or  t‚ÇÅ t‚ÇÇ) := rfl

      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫ ‚àß ‚Äπt‚ÇÑ‚Ä∫] = .binOp .or (.binOp .and t‚ÇÅ t‚ÇÇ) (.binOp .and t‚ÇÉ t‚ÇÑ) := rfl
    end Logic

    section Arithmetic
      variable {lhs rhs t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ: Term}

      example: [Term| ‚Äπlhs‚Ä∫ + ‚Äπrhs‚Ä∫] = .binOp .add lhs rhs := rfl
      example: [Term| ‚Äπlhs‚Ä∫ * ‚Äπrhs‚Ä∫] = .binOp .mul lhs rhs := rfl

      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫]   = .binOp .add (.binOp .add t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| (‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫) + ‚Äπt‚ÇÉ‚Ä∫] = .binOp .add (.binOp .add t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + (‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫)] = .binOp .add t‚ÇÅ (.binOp .add t‚ÇÇ t‚ÇÉ) := rfl
      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫]   = .binOp .mul (.binOp .mul t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| (‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫) * ‚Äπt‚ÇÉ‚Ä∫] = .binOp .mul (.binOp .mul t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * (‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫)] = .binOp .mul t‚ÇÅ (.binOp .mul t‚ÇÇ t‚ÇÉ) := rfl

      example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫] = .binOp .add t‚ÇÅ (.binOp .mul t‚ÇÇ t‚ÇÉ) := rfl
      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫] = .binOp .add (.binOp .mul t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl

      -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫ * ‚Äπt‚ÇÑ‚Ä∫] = .binOp .add (.binOp .mul t‚ÇÅ t‚ÇÇ) (.binOp .mul t‚ÇÉ t‚ÇÑ) := rfl
    end Arithmetic

    section Comparison
      variable {lhs rhs: Term}

      example: [Term| ‚Äπlhs‚Ä∫ < ‚Äπrhs‚Ä∫] = .binOp .lt  lhs rhs := rfl
      example: [Term| ‚Äπlhs‚Ä∫ ‚â§ ‚Äπrhs‚Ä∫] = .binOp .lte lhs rhs := rfl
      example: [Term| ‚Äπlhs‚Ä∫ > ‚Äπrhs‚Ä∫] = .binOp .gt  lhs rhs := rfl
      example: [Term| ‚Äπlhs‚Ä∫ ‚â• ‚Äπrhs‚Ä∫] = .binOp .gte lhs rhs := rfl
    end Comparison

    section Conditionals
      scoped syntax "if" stlc_surface_tm "then" stlc_surface_tm "else" stlc_surface_tm : stlc_surface_tm

      macro_rules
        | `([Term| if $c:stlc_surface_tm then $t:stlc_surface_tm else $f:stlc_surface_tm ]) => `(Term.cond [Term| $c] [Term| $t] [Term| $f])

      variable {c t f: Term}

      example: [Term| if ‚Äπc‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] = .cond c t f := rfl
    end Conditionals

    section Bindings
    end Bindings

    section Functions
    end Functions
  end Terms

  section TopLevel
    scoped syntax "[Top|" stlc_surface_top "]" : term

    section Inject
      scoped syntax "‚Äπ" term "‚Ä∫" : stlc_surface_top

      macro_rules
        | `([Top| ‚Äπ $t:term ‚Ä∫ ]) => `($(Lean.quote t))

      variable {t: Top}

      example: [Top| ‚Äπt‚Ä∫] = t := rfl
    end Inject

    section Types
    end Types

    section Values
    end Values

    section Definitions
    end Definitions

    section Implementations
    end Implementations
  end TopLevel

  namespace File
/-!
# Files
-/

  end File
end Total.Stlc.Lang.Surface
