import Total.Relation

import Total.Stlc.Lang.Surface.Grammar
import Total.Stlc.Lang.Surface.Syntax

set_option autoImplicit false

namespace Total.Stlc.Lang.Surface
  /-!
  # Simply-Typed Lambda Calculus Surface Syntax Semantics

  These are the semantics of the language, given as inductive relations.
  -/

  namespace UnOp
/-!
# Unary Operators

Unary operators are primitive operations that operate on a single value
operand and produce a value result.  The type of the operand and the result
are not necessarily the same.

## Implemented Operators

There is one group of operators currently supported:

- **Logical**: Negation of boolean values (logical NOT)

The common operation of arithmetic negation is not supported as it is not
closed in the natural numbers.
-/

    /--
    ## Typing Relation

    The typing relation contains the allowed typing derevations for unary
    operators.

    ### Indexes

    The typing relation is indexed by three values:

    - The operator
    - The type of the operand
    - The type of the result
    -/
    inductive HasType: UnOp ‚Üí Ty ‚Üí Ty ‚Üí Prop where
      /-- Logical Negation maps from Boolean values to Boolean values -/
      | not: HasType .not [Ty| ùîπ] [Ty| ùîπ]

    /--
    ## Single-Step Evaluation Relation

    The single-step evaluation relation contains all of the terms that can be
    computed in a single step by a unary operator.

    The inference rules in this relation take primitive Lean values instead of
    `Term`s since these are primitive operations that require their operand to
    be a value.  The rules for reducing the operand to a value are in the
    single-step evaluation relation for `Term`s.

    ### Indexes

    The single-step evaluation relation is indexed by three values:

    - The operator
    - The operand
    - The result
    -/
    inductive Eval‚ÇÅ: UnOp ‚Üí Term ‚Üí Term ‚Üí Prop where
      /--
      Logical Negation takes a boolean `operand` and performs a logical `not` on
      it.
      -/
      | not {operand: Bool}: Eval‚ÇÅ .not (.bool operand) (.bool !operand)
  end UnOp

  namespace BinOp
/-!
# Binary Operators

Unary operators are primitive operations that operate on two value
operands (a left-hand and a right-hand operand) and produce a value result.
The types of the left- and right-hand operands and the result are not
necessarily the same.

## Implemented Operators

There are four groups of operators currently supported:

- **Logical**: Conjuction and disjunction of boolean values (logical AND and
  logical OR)
- **Arithmetic**: Addition and multiplication of natural numbers.  These
  operations are supported because they are closed in the natural numbers,
  whereas the commonly included Subtraction, division, and modulus are not.
- **Equality**: Equals and Not Equals.  These operators are inherently
  polymorphic and are supported on both Boolean and Natural number values.
- **Comparison**: Less Than- and Greater Than- (or Equals) operators that
  compare natural numbers.
-/

    /--
    ## Typing Relation

    The typing relation contains the allowed typing derevations for binary
    operators.

    ### Indexes

    The typing relation is indexed by four values:

    - The operator
    - The type of the left-hand operand
    - The type of the right-hand operand
    - The type of the result
    -/
    inductive HasType: BinOp ‚Üí Ty ‚Üí Ty ‚Üí Ty ‚Üí Prop
      /--
      Logical Conjunction operates on Boolean inputs and produces a Boolean
      result.
      -/
      | and: HasType .and [Ty| ùîπ] [Ty| ùîπ] [Ty| ùîπ]
      /--
      Logical Disjunction operates on Boolean inputs and produces a Boolean
      result.
      -/
      | or:  HasType .or  [Ty| ùîπ] [Ty| ùîπ] [Ty| ùîπ]
      /--
      Addition operates on Nat inputs and produces a Nat result.
      -/
      | add: HasType .add [Ty| ‚Ñï] [Ty| ‚Ñï] [Ty| ‚Ñï]
      /--
      Multiplication operates on Nat inputs and produces a Nat result.
      -/
      | mul: HasType .mul [Ty| ‚Ñï] [Ty| ‚Ñï] [Ty| ‚Ñï]
      /--
      Equality operates on inputs with identical types and produces a Boolean
      result.
      -/
      | eq  {œÑ: Ty}: HasType .eq  [Ty| ‚ÄπœÑ‚Ä∫] [Ty| ‚ÄπœÑ‚Ä∫] [Ty| ùîπ]
      /--
      Inequality operates on inputs with identical types and produces a Boolean
      result.
      -/
      | neq {œÑ: Ty}: HasType .neq [Ty| ‚ÄπœÑ‚Ä∫] [Ty| ‚ÄπœÑ‚Ä∫] [Ty| ùîπ]
      /--
      Less Than operates on Nat inputs and produces a Boolean result.
      -/
      | lt:  HasType .lt  [Ty| ‚Ñï] [Ty| ‚Ñï] [Ty| ùîπ]
      /--
      Less Than or Equal operates on Nat inputs and produces a Boolean result.
      -/
      | lte: HasType .lte [Ty| ‚Ñï] [Ty| ‚Ñï] [Ty| ùîπ]
      /--
      Greater Than operates on Nat inputs and produces a Boolean result.
      -/
      | gt:  HasType .gt  [Ty| ‚Ñï] [Ty| ‚Ñï] [Ty| ùîπ]
      /--
      Greater Than or Equal operates on Nat inputs and produces a Boolean
      result.
      -/
      | gte: HasType .gte [Ty| ‚Ñï] [Ty| ‚Ñï] [Ty| ùîπ]

    /--
    ## Single-Step Evaluation Relation

    The single-step evaluation relation contains all of the terms that can be
    computed in a single step by a binary operator.

    The inference rules in this relation take primitive Lean values instead of
    `Term`s since these are primitive operations that require their operands to
    be values.  The rules for reducing the operands to values are in the
    single-step evaluation relation for `Term`s.

    ### Indexes

    The single-step evaluation relation is indexed by four values:

    - The operator
    - The left-hand operand
    - The right-hand operand
    - The result
    -/
    inductive Eval‚ÇÅ: BinOp ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Prop where
      /--
      Logical Conjuction takes two boolean values `lhs` and `rhs` and returns
      `lhs && rhs`.
      -/
      | and {lhs rhs: Bool}: Eval‚ÇÅ .and [Term| ‚Äπbool:lhs‚Ä∫] [Term| ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs && rhs‚Ä∫]
      /--
      Logical Disjunction takes two boolean values `lhs` and `rhs` and returns
      `lhs || rhs`.
      -/
      | or  {lhs rhs: Bool}: Eval‚ÇÅ .or  [Term| ‚Äπbool:lhs‚Ä∫] [Term| ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs || rhs‚Ä∫]
      /--
      Addition takes two natural number values `lhs` and `rhs` and returns their
      sum (`lhs + rhs`).
      -/
      | add {lhs rhs: Nat}:  Eval‚ÇÅ .add [Term| ‚Äπnat:lhs‚Ä∫]  [Term| ‚Äπnat:rhs‚Ä∫]  [Term| ‚Äπnat:lhs + rhs‚Ä∫]
      /--
      Multiplication takes two natural number values `lhs` and `rhs` and returns their
      product (`lhs * rhs`).
      -/
      | mul {lhs rhs: Nat}:  Eval‚ÇÅ .mul [Term| ‚Äπnat:lhs‚Ä∫]  [Term| ‚Äπnat:rhs‚Ä∫]  [Term| ‚Äπnat:lhs * rhs‚Ä∫]
      /--
      Boolean equality takes two boolean values `lhs` and `rhs` and returns
      `true` if they are equal and `false` otherwise (`lhs == rhs`).
      -/
      | eqBool  {lhs rhs: Bool}: Eval‚ÇÅ .eq  [Term| ‚Äπbool:lhs‚Ä∫] [Term| ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs == rhs‚Ä∫]
      /--
      Natural number equality takes two natural number values `lhs` and `rhs` and
      returns `true` if they are equal and `false` otherwise (`lhs == rhs`).
      -/
      | eqNat   {lhs rhs: Nat}:  Eval‚ÇÅ .eq  [Term| ‚Äπnat:lhs‚Ä∫]  [Term| ‚Äπnat:rhs‚Ä∫]  [Term| ‚Äπbool:lhs == rhs‚Ä∫]
      /--
      Boolean inequality takes two boolean values `lhs` and `rhs` and returns
      `true` if they are unequal and `false` otherwise (`lhs != rhs`).
      -/
      | neqBool {lhs rhs: Bool}: Eval‚ÇÅ .neq [Term| ‚Äπbool:lhs‚Ä∫] [Term| ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs != rhs‚Ä∫]
      /--
      Natural number inequality takes two natural number values `lhs` and `rhs`
      and returns `true` if they are unequal and `false` otherwise
      (`lhs != rhs`).
      -/
      | neqNat  {lhs rhs: Nat}:  Eval‚ÇÅ .neq [Term| ‚Äπnat:lhs‚Ä∫]  [Term| ‚Äπnat:rhs‚Ä∫]  [Term| ‚Äπbool:lhs != rhs‚Ä∫]
      /--
      Less than comparison takes two natural number values `lhs` and `rhs` and
      returns `true` if the first is less than the second (`lhs < rhs`).
      -/
      | lt  {lhs rhs: Nat}: Eval‚ÇÅ .lt  [Term| ‚Äπnat:lhs‚Ä∫] [Term| ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs < rhs‚Ä∫]
      /--
      Less than or equal comparison takes two natural number values `lhs` and
      `rhs` and returns `true` if the first is less than or equal to the second
      (`lhs ‚â§ rhs`).
      -/
      | lte {lhs rhs: Nat}: Eval‚ÇÅ .lte [Term| ‚Äπnat:lhs‚Ä∫] [Term| ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs ‚â§ rhs‚Ä∫]
      /--
      Greater than comparison takes two natural number values `lhs` and `rhs`
      and returns `true` if the first is greater than the second (`lhs > rhs`).
      -/
      | gt  {lhs rhs: Nat}: Eval‚ÇÅ .gt  [Term| ‚Äπnat:lhs‚Ä∫] [Term| ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs > rhs‚Ä∫]
      /--
      Greater than or equal comparison takes two natural number values `lhs` and
      `rhs` and returns `true` if the first is greater than or equal to the
      second (`lhs ‚â• rhs`).
      -/
      | gte {lhs rhs: Nat}: Eval‚ÇÅ .gte [Term| ‚Äπnat:lhs‚Ä∫] [Term| ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs ‚â• rhs‚Ä∫]
  end BinOp

  namespace Term
/-!
# Terms
-/

    /--
    ## Value Relation

    The value relation contains the terms that are values, i.e., terms that
    cannot be reduced any further by the evaluation rules.

    ### Indexes

    The value relation is indexed by one value:

    - The term
    -/
    inductive IsValue: Term ‚Üí Prop where
      /-- Boolean literals are values -/
      | bool (b: Bool): IsValue [Term| ‚Äπbool:b‚Ä∫]
      /-- Natural number literals are values -/
      | nat (n: Nat): IsValue [Term| ‚Äπnat:n‚Ä∫]

    /--
    ## Typing Relation

    The typing relation contains the allowed typing derivations for terms.

    ### Indexes

    The value relation is indexed by two values:

    - The term
    - The term's derived type
    -/
    inductive HasType: Term ‚Üí Ty ‚Üí Prop where
      /-- Boolean literals are of Boolean type -/
      | bool {b: Bool}: HasType [Term| ‚Äπbool:b‚Ä∫] [Ty| ùîπ]
      /-- Natural number literals are of Nat type -/
      | nat {n: Nat}: HasType [Term| ‚Äπnat:n‚Ä∫] [Ty| ‚Ñï]
      /--
      Unary operation expressions have the type of their result (`œÑ‚ÇÇ`).

      ### Premises

      - `h‚ÇÅ`: The unary operator maps from an input of type `œÑ‚ÇÅ` to a result of
        type `œÑ‚ÇÇ`
      - `h‚ÇÇ`: The operand has type `œÑ‚ÇÅ`.

      ### Conclusion

      The unary operator expression has type `œÑ‚ÇÇ`.
      -/
      | unOp {œÑ‚ÇÅ œÑ‚ÇÇ: Ty} {op: UnOp} {operand: Term} (h‚ÇÅ: UnOp.HasType op œÑ‚ÇÅ œÑ‚ÇÇ) (h‚ÇÇ: HasType operand œÑ‚ÇÅ): HasType (.unOp op operand) œÑ‚ÇÇ
      /--
      Binary operation expressions have the type of their result (`œÑ‚ÇÉ`).

      ### Premises

      - `h‚ÇÅ`: The binary operator maps from inputs of type `œÑ‚ÇÅ` and `œÑ‚ÇÇ` to a
        result of type `œÑ‚ÇÉ`
      - `h‚ÇÇ`: The left-hand side operand has type `œÑ‚ÇÅ`.
      - `h‚ÇÉ`: The left-hand side operand has type `œÑ‚ÇÇ`.

      ### Conclusion

      The binary operator expression has type `œÑ‚ÇÉ`.
      -/
      | binOp {œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚ÇÉ: Ty} {op: BinOp} {lhs rhs: Term} (h‚ÇÅ: BinOp.HasType op œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚ÇÉ) (h‚ÇÇ: HasType lhs œÑ‚ÇÅ) (h‚ÇÉ: HasType rhs œÑ‚ÇÇ): HasType (.binOp op lhs rhs) œÑ‚ÇÉ
      /--
      Conditional expressions have the type of their `then` and `else` clauses.
      The types of the clauses must be equal.

      ### Premises

      - `h‚ÇÅ`: The condition is of Boolean type
      - `h‚ÇÇ`: The `then` clause has some type `œÑ`.
      - `h‚ÇÉ`: The `else` clause has the same type `œÑ`.

      ### Conclusion

      The conditional operator expression has type `œÑ`.
      -/
      | cond {c t f: Term} {œÑ: Ty} (h‚ÇÅ: HasType c [Ty| ùîπ]) (h‚ÇÇ: HasType t œÑ) (h‚ÇÉ: HasType f œÑ): HasType [Term| if ‚Äπc‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] œÑ

    /--
    ## Single-Step Evaluation Relation

    The single-step evaluation relation contains all of the terms that can be
    computed in a single step.

    ### Indexes

    The value relation is indexed by two values:

    - The term being evaluated
    - The term it evaluates to
    -/
    inductive Eval‚ÇÅ: Term ‚Üí Term ‚Üí Prop where
      /--
      Unary operators applied to a value operand follow the unary operator
      single-step semantics.

      ### Premises

      - `h‚ÇÅ`: The operand is a value
      - `h‚ÇÇ`: A single-step unary operation evaluation

      ### Conclusion

      The term evaluates to the result of the unary operation evaluation.
      -/
      | unOp {op: UnOp} {operand res: Term} (h‚ÇÅ: IsValue operand) (h‚ÇÇ: UnOp.Eval‚ÇÅ op operand res): Eval‚ÇÅ (.unOp op operand) res
      /--
      Unary operators applied to a non-value operand evaluate the operand using
      the term single-step semantics.

      ### Premises

      - `h`: A single-step term evaluation of the operand

      ### Conclusion

      The operand takes an evaluation step.
      -/
      | unOpOp {op: UnOp} {operand‚ÇÅ operand‚ÇÇ: Term} (h: Eval‚ÇÅ operand‚ÇÅ operand‚ÇÇ): Eval‚ÇÅ (.unOp op operand‚ÇÅ) (.unOp op operand‚ÇÇ)
      /--
      Binary operators applied to two value operands follow the binary operator
      single-step semantics.

      ### Premises

      - `h‚ÇÅ`: The left-hand operand is a value
      - `h‚ÇÇ`: The right-hand operand is a value
      - `h‚ÇÉ`: A single-step binary operation evaluation

      ### Conclusion

      The term evaluates to the result of the binary operation evaluation.
      -/
      | binOp {op: BinOp} {lhs rhs res: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: IsValue rhs) (h‚ÇÉ: BinOp.Eval‚ÇÅ op lhs rhs res): Eval‚ÇÅ (.binOp op lhs rhs) res
      /--
      Binary operators applied to a value left-hand operand and a non-value
      right-hand operand evaluate the right-hand operand using the term
      single-step semantics.

      ### Premises

      - `h‚ÇÅ`: The left-hand operand is a value
      - `h‚ÇÇ`: A single-step term evaluation of the right-hand operand

      ### Conclusion

      The right-hand operand takes an evaluation step.
      -/
      | binOpRight {op: BinOp} {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ (.binOp op lhs rhs‚ÇÅ) (.binOp op lhs rhs‚ÇÇ)
      /--
      Binary operators applied to non-value left- and right-hand operand
      evaluate the left-hand operand using the term single-step semantics.

      ### Premises

      - `h`: A single-step term evaluation of the left-hand operand

      ### Conclusion

      The left-hand operand takes an evaluation step.
      -/
      | binOpLeft {op: BinOp} {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ (.binOp op lhs‚ÇÅ rhs) (.binOp op lhs‚ÇÇ rhs)
      /--
      Conditional expressions with a condition of a literal `true` value
      evaluate to their `then` expression.

      ### Conclusion

      The conditional evalues to the `then` expression.
      -/
      | condTrue {t f: Term}: Eval‚ÇÅ [Term| if tru then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ‚Äπt‚Ä∫]
      /--
      Conditional expressions with a condition of a literal `false` value
      evaluate to their `else` expression.

      ### Conclusion

      The conditional evalues to the `else` expression.
      -/
      | condFalse {t f: Term}: Eval‚ÇÅ [Term| if fls then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ‚Äπf‚Ä∫]
      /--
      Conditional expressions with a non-value condition expression evaluate the
      condition expression using the term single-step semantics.

      ### Premises

      - `h`: A single-step term evaluation of the condition expression

      ### Conclusion

      The condition expression takes an evaluation step.
      -/
      | cond {c‚ÇÅ c‚ÇÇ t f: Term} (h: Eval‚ÇÅ c‚ÇÅ c‚ÇÇ): Eval‚ÇÅ [Term| if ‚Äπc‚ÇÅ‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| if ‚Äπc‚ÇÇ‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫]

    /--
    ## Multi-Step Evaluation Relation

    The multi-step evaluation relation for terms is the reflexive, transitive
    closure of the single-step evaluation relation for terms.
    -/
    abbrev Eval := RTC Eval‚ÇÅ
  end Term

  namespace Top
/-!
# Top-Level Terms
-/

    /--
    ## Value Relation

    TODO: Implement
    -/
    inductive IsValue: Top ‚Üí Prop where

    /--
    ## Typing Relation

    TODO: Implement
    -/
    inductive HasType: Top ‚Üí Ty ‚Üí Prop where

    /--
    ## Single-Step Evaluation Relation

    TODO: Implement
    -/
    inductive Eval‚ÇÅ: Top ‚Üí Top ‚Üí Prop where

    /--
    ## Multi-Step Evalution Relation

    The multi-step evaluation relation for top-level terms is the reflexive,
    transitive closure of the single-step evaluation relation for top-level
    terms.
    -/
    abbrev Eval := RTC Eval‚ÇÅ
  end Top

  namespace File
/-!
# Files
-/
  end File
end Total.Stlc.Lang.Surface
