import Total.Relation

import Total.Stlc.Lang.Surface.Grammar
import Total.Stlc.Lang.Surface.Syntax

namespace Total.Stlc.Lang.Surface
  section Types
  end Types

  namespace Term
    inductive IsValue: Term ‚Üí Prop where
      | bool (b: Bool): IsValue [Term| ‚Äπbool:b‚Ä∫]
      | nat (n: Nat): IsValue [Term| ‚Äπnat:n‚Ä∫]
      -- | var (id: String): IsValue (.var id)
      -- | abs (params: List (String √ó Ty)) (body: Term): IsValue (.abs params body)

    inductive HasType: Env ‚Üí Term ‚Üí Ty ‚Üí Prop where
      | bool {Œµ: Env} {b: Bool}: HasType Œµ [Term| ‚Äπbool:b‚Ä∫] [Ty| ùîπ]
      | nat {Œµ: Env} {n: Nat}: HasType Œµ [Term| ‚Äπnat:n‚Ä∫] [Ty| ‚Ñï]
      | and {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ùîπ]) (h‚ÇÇ: HasType Œµ rhs [Ty| ùîπ]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ ‚àß ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | or  {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ùîπ]) (h‚ÇÇ: HasType Œµ rhs [Ty| ùîπ]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ ‚à® ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | not {Œµ: Env} {op: Term} (h: HasType Œµ op [Ty| ùîπ]): HasType Œµ [Term| ¬¨ ‚Äπop‚Ä∫] [Ty| ùîπ]
      | add {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ + ‚Äπrhs‚Ä∫] [Ty| ‚Ñï]
      | sub {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ - ‚Äπrhs‚Ä∫] [Ty| ‚Ñï]
      | mul {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ * ‚Äπrhs‚Ä∫] [Ty| ‚Ñï]
      | eq  {Œµ: Env} {lhs rhs: Term} {œÑ: Ty} (h‚ÇÅ: HasType Œµ lhs œÑ) (h‚ÇÇ: HasType Œµ rhs œÑ): HasType Œµ [Term| ‚Äπlhs‚Ä∫ = ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | neq {Œµ: Env} {lhs rhs: Term} {œÑ: Ty} (h‚ÇÅ: HasType Œµ lhs œÑ) (h‚ÇÇ: HasType Œµ rhs œÑ): HasType Œµ [Term| ‚Äπlhs‚Ä∫ ‚â† ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | lt  {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ < ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | lte {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ ‚â§ ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | gt  {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ < ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | gte {Œµ: Env} {lhs rhs: Term} (h‚ÇÅ: HasType Œµ lhs [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œµ rhs [Ty| ‚Ñï]): HasType Œµ [Term| ‚Äπlhs‚Ä∫ ‚â§ ‚Äπrhs‚Ä∫] [Ty| ùîπ]
      | cond {Œµ: Env} {c t f: Term} {œÑ: Ty} (h‚ÇÅ: HasType Œµ c [Ty| ùîπ]) (h‚ÇÇ: HasType Œµ t œÑ) (h‚ÇÉ: HasType Œµ f œÑ): HasType Œµ [Term| if ‚Äπc‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] œÑ
      -- | var  {Œµ: Env} {œÑ: Ty}: HasType Œµ _ œÑ
      -- | bind {Œµ: Env} {expr scope: Term} {œÑ‚ÇÅ œÑ‚ÇÇ: Ty} (h‚ÇÅ: HasType Œµ expr œÑ‚ÇÅ) (h‚ÇÇ: HasType (Œµ.bind Œπ œÑ‚ÇÅ) scope œÑ‚ÇÇ): HasType Œµ (.bind t‚ÇÅ expr scope) œÑ‚ÇÇ
      -- TODO: Turn List.{foldl,map} applications into functions on FormalList
      -- | abs {Œµ: Env} {formals: FormalList} {body: Term} {œÑ: Ty} (h: HasType (List.foldl (fun Œµ (Œπ, œÑ) => Œµ.bind Œπ œÑ) Œµ formals) body œÑ): HasType Œµ (.abs formals body) (.fn (List.map (¬∑.snd) formals) œÑ)
      -- TODO: Turn List.{foldl,zip} applications into functions on FormalList
      -- ERROR: Free Variable Somewhere?!?!
      -- | app {Œµ: Env} {params: ParamList} {res: Ty} {fn: Term} {args: ArgList} (h‚ÇÅ: HasType Œµ fn (.fn params res)) (h‚ÇÇ: List.foldl (fun p (t, œÑ) => p ‚àß HasType Œµ t œÑ) true (List.zip args params)): HasType Œµ (.app fn args) res

    inductive Eval‚ÇÅ: Term ‚Üí Term ‚Üí Prop where
      | and {lhs rhs: Bool}: Eval‚ÇÅ [Term| ‚Äπbool:lhs‚Ä∫ ‚àß ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs && rhs‚Ä∫]
      | andRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ ‚àß ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ ‚àß ‚Äπrhs‚ÇÇ‚Ä∫]
      | andLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ ‚àß ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ ‚àß ‚Äπrhs‚Ä∫]

      | or {lhs rhs: Bool}: Eval‚ÇÅ [Term| ‚Äπbool:lhs‚Ä∫ ‚à® ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs || rhs‚Ä∫]
      | orRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ ‚à® ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ ‚à® ‚Äπrhs‚ÇÇ‚Ä∫]
      | orLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ ‚à® ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ ‚à® ‚Äπrhs‚Ä∫]

      | not {op: Bool}: Eval‚ÇÅ [Term| ¬¨ ‚Äπbool:op‚Ä∫] [Term| ‚Äπbool:!op‚Ä∫]
      | notOp {op‚ÇÅ op‚ÇÇ: Term} (h: Eval‚ÇÅ op‚ÇÅ op‚ÇÇ): Eval‚ÇÅ [Term| ¬¨ ‚Äπop‚ÇÅ‚Ä∫] [Term| ‚Äπop‚ÇÇ‚Ä∫]

      | add {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ + ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπnat:lhs + rhs‚Ä∫]
      | addRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ + ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ + ‚Äπrhs‚ÇÇ‚Ä∫]
      | addLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ + ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ + ‚Äπrhs‚Ä∫]

      | sub {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ - ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπnat:lhs - rhs‚Ä∫]
      | subRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ - ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ - ‚Äπrhs‚ÇÇ‚Ä∫]
      | subLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ - ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ - ‚Äπrhs‚Ä∫]

      | mul {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ * ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπnat:lhs * rhs‚Ä∫]
      | mulRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ * ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ * ‚Äπrhs‚ÇÇ‚Ä∫]
      | mulLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ * ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ * ‚Äπrhs‚Ä∫]

      | eqBool {lhs rhs: Bool}: Eval‚ÇÅ [Term| ‚Äπbool:lhs‚Ä∫ = ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs == rhs‚Ä∫]
      | eqNat  {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ = ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs == rhs‚Ä∫]
      | eqRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ = ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ = ‚Äπrhs‚ÇÇ‚Ä∫]
      | eqLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ = ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ = ‚Äπrhs‚Ä∫]

      | neqBool {lhs rhs: Bool}: Eval‚ÇÅ [Term| ‚Äπbool:lhs‚Ä∫ ‚â† ‚Äπbool:rhs‚Ä∫] [Term| ‚Äπbool:lhs != rhs‚Ä∫]
      | neqNat  {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ ‚â† ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs != rhs‚Ä∫]
      | neqRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ ‚â† ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ ‚â† ‚Äπrhs‚ÇÇ‚Ä∫]
      | neqLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ ‚â† ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ ‚â† ‚Äπrhs‚Ä∫]

      | lt {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ < ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs < rhs‚Ä∫]
      | ltRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ < ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ < ‚Äπrhs‚ÇÇ‚Ä∫]
      | ltLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ < ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ < ‚Äπrhs‚Ä∫]

      | lte {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ ‚â§ ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs ‚â§ rhs‚Ä∫]
      | lteRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ ‚â§ ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ ‚â§ ‚Äπrhs‚ÇÇ‚Ä∫]
      | lteLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ ‚â§ ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ ‚â§ ‚Äπrhs‚Ä∫]

      | gt {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ > ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs > rhs‚Ä∫]
      | gtRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ > ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ > ‚Äπrhs‚ÇÇ‚Ä∫]
      | gtLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ > ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ > ‚Äπrhs‚Ä∫]

      | gte {lhs rhs: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:lhs‚Ä∫ ‚â• ‚Äπnat:rhs‚Ä∫] [Term| ‚Äπbool:lhs ‚â• rhs‚Ä∫]
      | gteRight {lhs rhs‚ÇÅ rhs‚ÇÇ: Term} (h‚ÇÅ: IsValue lhs) (h‚ÇÇ: Eval‚ÇÅ rhs‚ÇÅ rhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚Ä∫ ‚â• ‚Äπrhs‚ÇÅ‚Ä∫] [Term| ‚Äπlhs‚Ä∫ ‚â• ‚Äπrhs‚ÇÇ‚Ä∫]
      | gteLeft {lhs‚ÇÅ lhs‚ÇÇ rhs: Term} (h: Eval‚ÇÅ lhs‚ÇÅ lhs‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπlhs‚ÇÅ‚Ä∫ ‚â• ‚Äπrhs‚Ä∫] [Term| ‚Äπlhs‚ÇÇ‚Ä∫ ‚â• ‚Äπrhs‚Ä∫]

      | condTrue {t f: Term}: Eval‚ÇÅ [Term| if tru then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ‚Äπt‚Ä∫]
      | contFalse {t f: Term}: Eval‚ÇÅ [Term| if fls then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ‚Äπf‚Ä∫]
      | cond {c‚ÇÅ c‚ÇÇ t f: Term} (h: Eval‚ÇÅ c‚ÇÅ c‚ÇÇ): Eval‚ÇÅ [Term| if ‚Äπc‚ÇÅ‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| if ‚Äπc‚ÇÇ‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫]

      -- | bind {Œπ: String} {œÑy: Ty} {expr: Term} {scope: Term} (h: IsValue expr): Eval‚ÇÅ (.bind Œπ œÑ expr scope) ([Œπ ‚Ü¶  expr] scope)
      -- | bindExpr {Œπ: String} {œÑy: Ty} {e‚ÇÅ e‚ÇÇ: Term} {scope: Term} (h: Eval‚ÇÅ e‚ÇÅ e‚ÇÇ): Eval‚ÇÅ (.bind Œπ œÑ e‚ÇÅ scope) (.bind Œπ œÑ e‚ÇÇ scope)

      -- TODO: Application
      -- | app {params: ParamList} {body: Term} {fn: Term} {args: ArgList œÅ} (h‚ÇÅ: IsValue fn) (h‚ÇÇ: List.foldl (fun p t => p ‚àß IsValue t) true args): Eval‚ÇÅ (.app (.abs params body) args) (List.foldl (fun body (formal, arg) => [formal ‚Ü¶ arg] body) body (List.zip (List.map fst formals) args))
      -- | appArgs {fn: Term} {args: ArgList} (h‚ÇÅ: IsValue fn)
      -- | appFn {fn‚ÇÅ fn‚ÇÇ: Term} {args: ArgList œÅ} (h: Eval‚ÇÅ fn‚ÇÅ fn‚ÇÇ): Eval‚ÇÅ (.app fn‚ÇÅ args) (.app fn‚ÇÇ args)

    def Eval := RTC Eval‚ÇÅ
  end Term

  namespace Top
    inductive IsValue: Top ‚Üí Prop where
    inductive HasType: Top ‚Üí Ty ‚Üí Prop where
    inductive Eval‚ÇÅ: Top ‚Üí Top ‚Üí Prop where
    def Eval := RTC Eval‚ÇÅ
  end Top
end Total.Stlc.Lang.Surface
